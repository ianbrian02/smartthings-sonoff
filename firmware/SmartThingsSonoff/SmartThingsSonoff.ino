#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <ESP8266HTTPClient.h>
#include <EEPROM.h>
#include <ESP8266HTTPUpdateServer.h>
#include <ArduinoJson.h>
#include <ArduinoOTA.h>

#include "Sonoff.h"

const char *ssid = "<WiFi>";
const char *password = "<Password>";

const char sonoffLine_html[] = {
  0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64,
  0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65,
  0x3e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x20, 0x53, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x20, 0x44, 0x65, 0x76, 0x69,
  0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x7b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67,
  0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
  0x20, 0x23, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x66,
  0x61, 0x6d, 0x69, 0x6c, 0x79, 0x3a, 0x20, 0x41, 0x72, 0x69, 0x61, 0x6c,
  0x2c, 0x20, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2c,
  0x20, 0x53, 0x61, 0x6e, 0x73, 0x2d, 0x53, 0x65, 0x72, 0x69, 0x66, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x6c,
  0x6f, 0x72, 0x3a, 0x20, 0x23, 0x30, 0x30, 0x30, 0x30, 0x38, 0x38, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f,
  0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x65, 0x61,
  0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x68, 0x31,
  0x3e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x20, 0x53, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x20, 0x44, 0x65, 0x76, 0x69,
  0x63, 0x65, 0x21, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x3c, 0x70, 0x20,
  0x69, 0x64, 0x3d, 0x22, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e,
  0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x3c, 0x2f, 0x70, 0x3e,
  0x0a, 0x3c, 0x70, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x72, 0x65, 0x6c, 0x61,
  0x79, 0x22, 0x3e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x3c, 0x2f, 0x70, 0x3e,
  0x0a, 0x3c, 0x70, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x77, 0x69, 0x66, 0x69,
  0x22, 0x3e, 0x57, 0x69, 0x46, 0x69, 0x3a, 0x3c, 0x2f, 0x70, 0x3e, 0x0a,
  0x3c, 0x70, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x70, 0x22, 0x3e, 0x49,
  0x70, 0x3a, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x20, 0x69, 0x64,
  0x3d, 0x22, 0x6d, 0x61, 0x63, 0x22, 0x3e, 0x6d, 0x61, 0x63, 0x3a, 0x3c,
  0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x53,
  0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x4e, 0x61,
  0x6d, 0x65, 0x22, 0x3e, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x20,
  0x69, 0x64, 0x3d, 0x22, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69,
  0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x3c, 0x2f,
  0x70, 0x3e, 0x0a, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74,
  0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
  0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f,
  0x73, 0x74, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,
  0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22,
  0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x54, 0x6f, 0x67, 0x67,
  0x6c, 0x65, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x3e, 0x3c, 0x2f,
  0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0a,
  0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69,
  0x64, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3e, 0x0a,
  0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x62, 0x6f,
  0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
  0x0a, 0x20, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
  0x73, 0x74, 0x61, 0x74, 0x65, 0x28, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
  0x73, 0x2c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x29, 0x20, 0x7b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x72, 0x65, 0x71, 0x20,
  0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x58, 0x4d, 0x4c, 0x48, 0x74, 0x74,
  0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
  0x28, 0x27, 0x47, 0x45, 0x54, 0x27, 0x2c, 0x20, 0x27, 0x2f, 0x73, 0x74,
  0x61, 0x74, 0x65, 0x27, 0x2c, 0x20, 0x74, 0x72, 0x75, 0x65, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x71, 0x2e, 0x73, 0x65, 0x74,
  0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
  0x72, 0x28, 0x27, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x27, 0x2c, 0x20,
  0x27, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
  0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x27, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x72, 0x65, 0x71, 0x2e, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64,
  0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
  0x20, 0x3d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
  0x28, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69,
  0x66, 0x20, 0x28, 0x72, 0x65, 0x71, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x79,
  0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x29, 0x20,
  0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66,
  0x20, 0x28, 0x72, 0x65, 0x71, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
  0x20, 0x3d, 0x3d, 0x20, 0x32, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x75, 0x63,
  0x63, 0x65, 0x73, 0x73, 0x28, 0x72, 0x65, 0x71, 0x2e, 0x72, 0x65, 0x73,
  0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x65, 0x6c,
  0x73, 0x65, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x28, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b,
  0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x71, 0x2e, 0x73, 0x65,
  0x6e, 0x64, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20,
  0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74,
  0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x6a, 0x73, 0x6f,
  0x6e, 0x20, 0x3d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x70, 0x61, 0x72,
  0x73, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
  0x50, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
  0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
  0x79, 0x49, 0x64, 0x28, 0x27, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x27,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x70, 0x74, 0x69, 0x6d,
  0x65, 0x50, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
  0x3d, 0x27, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x27, 0x2b, 0x6a,
  0x73, 0x6f, 0x6e, 0x2e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x31,
  0x30, 0x30, 0x30, 0x2b, 0x27, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
  0x73, 0x27, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20,
  0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63,
  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x27, 0x72, 0x65,
  0x6c, 0x61, 0x79, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72,
  0x65, 0x6c, 0x61, 0x79, 0x50, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54,
  0x65, 0x78, 0x74, 0x3d, 0x27, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x27,
  0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x77, 0x69, 0x66,
  0x69, 0x50, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
  0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
  0x42, 0x79, 0x49, 0x64, 0x28, 0x27, 0x77, 0x69, 0x66, 0x69, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x69, 0x66, 0x69, 0x50, 0x2e,
  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d, 0x27, 0x53,
  0x73, 0x69, 0x64, 0x3a, 0x27, 0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x73,
  0x73, 0x69, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72,
  0x20, 0x69, 0x70, 0x50, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
  0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x27, 0x69, 0x70, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x70, 0x50, 0x2e, 0x69, 0x6e,
  0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d, 0x27, 0x69, 0x70, 0x3a,
  0x27, 0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x69, 0x70, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x6d, 0x61, 0x63, 0x50, 0x20,
  0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67,
  0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
  0x64, 0x28, 0x27, 0x6d, 0x61, 0x63, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x6d, 0x61, 0x63, 0x50, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72,
  0x54, 0x65, 0x78, 0x74, 0x3d, 0x27, 0x6d, 0x61, 0x63, 0x3a, 0x27, 0x2b,
  0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x63, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54,
  0x68, 0x69, 0x6e, 0x67, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x20, 0x3d,
  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65,
  0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
  0x28, 0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67,
  0x73, 0x4e, 0x61, 0x6d, 0x65, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x4e, 0x61, 0x6d, 0x65, 0x50, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54,
  0x65, 0x78, 0x74, 0x3d, 0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68,
  0x69, 0x6e, 0x67, 0x73, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x27, 0x2b,
  0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x74, 0x68,
  0x69, 0x6e, 0x67, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x74,
  0x68, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
  0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
  0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
  0x49, 0x64, 0x28, 0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69,
  0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x27, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x74, 0x68, 0x69,
  0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x2e, 0x69,
  0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d, 0x27, 0x53, 0x6d,
  0x61, 0x72, 0x74, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x44, 0x65,
  0x76, 0x69, 0x63, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x27,
  0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x74,
  0x68, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x63, 0x6f, 0x6e,
  0x66, 0x69, 0x67, 0x44, 0x69, 0x76, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63,
  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x27, 0x63, 0x6f,
  0x6e, 0x66, 0x69, 0x67, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x66, 0x69,
  0x67, 0x44, 0x69, 0x76, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68,
  0x69, 0x6c, 0x64, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x76, 0x2e, 0x72,
  0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x63,
  0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x76, 0x2e, 0x66, 0x69, 0x72,
  0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20,
  0x66, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
  0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x28, 0x27, 0x66, 0x6f, 0x72, 0x6d, 0x27, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74,
  0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x6d, 0x65, 0x74, 0x68,
  0x6f, 0x64, 0x27, 0x2c, 0x20, 0x27, 0x70, 0x6f, 0x73, 0x74, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x73, 0x65, 0x74, 0x41,
  0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x61, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x66,
  0x69, 0x67, 0x27, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
  0x61, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x49, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
  0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c,
  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x69, 0x6e, 0x70, 0x75, 0x74,
  0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x70, 0x70, 0x6c,
  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2e, 0x73, 0x65,
  0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27,
  0x74, 0x79, 0x70, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74,
  0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x70, 0x70, 0x6c,
  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2e, 0x73, 0x65,
  0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27,
  0x6e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x70, 0x70, 0x6c,
  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x27, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74,
  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x76, 0x61, 0x6c,
  0x75, 0x65, 0x27, 0x2c, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
  0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29,
  0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x61,
  0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x3d,
  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72,
  0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28,
  0x27, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
  0x6e, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
  0x74, 0x65, 0x28, 0x27, 0x74, 0x79, 0x70, 0x65, 0x27, 0x2c, 0x20, 0x27,
  0x74, 0x65, 0x78, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
  0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
  0x28, 0x27, 0x6e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x63,
  0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x27, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
  0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
  0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x76, 0x61, 0x6c, 0x75, 0x65,
  0x27, 0x2c, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x63, 0x65,
  0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x29, 0x3b, 0x0a, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74,
  0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x72, 0x6c, 0x20, 0x3d, 0x20,
  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65,
  0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27,
  0x69, 0x6e, 0x70, 0x75, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x55, 0x72, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
  0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x74, 0x79, 0x70, 0x65, 0x27, 0x2c,
  0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67,
  0x73, 0x55, 0x72, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
  0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x6e, 0x61, 0x6d, 0x65, 0x27,
  0x2c, 0x20, 0x27, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e,
  0x67, 0x73, 0x55, 0x72, 0x6c, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x55, 0x72, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
  0x62, 0x75, 0x74, 0x65, 0x28, 0x27, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
  0x2c, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
  0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x72, 0x6c, 0x29, 0x3b, 0x0a,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x64, 0x65, 0x66,
  0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x3d, 0x20,
  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65,
  0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27,
  0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
  0x74, 0x65, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
  0x75, 0x74, 0x65, 0x28, 0x27, 0x6e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20,
  0x27, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
  0x65, 0x27, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61,
  0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x20, 0x3d, 0x20,
  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65,
  0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27,
  0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x2e, 0x73, 0x65,
  0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27,
  0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x2c, 0x27, 0x30, 0x27, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31,
  0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d, 0x27,
  0x6f, 0x66, 0x66, 0x27, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
  0x61, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x3d,
  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72,
  0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28,
  0x27, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x2e, 0x73,
  0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28,
  0x27, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x2c, 0x27, 0x31, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
  0x32, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d,
  0x27, 0x6f, 0x6e, 0x27, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
  0x61, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x20, 0x3d,
  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72,
  0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28,
  0x27, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x2e, 0x73,
  0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28,
  0x27, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x2c, 0x27, 0x32, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
  0x33, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x3d,
  0x27, 0x6c, 0x61, 0x73, 0x74, 0x27, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x76, 0x61, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x34,
  0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
  0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
  0x74, 0x28, 0x27, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x34,
  0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
  0x65, 0x28, 0x27, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x2c, 0x27, 0x33,
  0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x70, 0x74, 0x69,
  0x6f, 0x6e, 0x34, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78,
  0x74, 0x3d, 0x27, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x74, 0x68, 0x69, 0x6e,
  0x67, 0x73, 0x27, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65,
  0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61,
  0x64, 0x64, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
  0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x28, 0x6f, 0x70,
  0x74, 0x69, 0x6f, 0x6e, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
  0x2e, 0x61, 0x64, 0x64, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
  0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x28,
  0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x29, 0x3b, 0x0a, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
  0x61, 0x74, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x6a,
  0x73, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
  0x74, 0x61, 0x74, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61,
  0x72, 0x20, 0x73, 0x61, 0x76, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63,
  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x69, 0x6e, 0x70,
  0x75, 0x74, 0x27, 0x29, 0x3b, 0x20, 0x2f, 0x2f, 0x69, 0x6e, 0x70, 0x75,
  0x74, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x53,
  0x75, 0x62, 0x6d, 0x69, 0x74, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x73, 0x65,
  0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x27,
  0x74, 0x79, 0x70, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x73, 0x75, 0x62, 0x6d,
  0x69, 0x74, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x61,
  0x76, 0x65, 0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
  0x75, 0x74, 0x65, 0x28, 0x27, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x2c,
  0x20, 0x27, 0x53, 0x61, 0x76, 0x65, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
  0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x20,
  0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63,
  0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
  0x28, 0x27, 0x70, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70,
  0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d,
  0x65, 0x6e, 0x74, 0x31, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65,
  0x78, 0x74, 0x20, 0x3d, 0x20, 0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x74,
  0x68, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x3a, 0x20, 0x27, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
  0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
  0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
  0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x2e,
  0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28,
  0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
  0x64, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70,
  0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x64, 0x6f,
  0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74,
  0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x62, 0x72,
  0x27, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72,
  0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c,
  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63,
  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x70, 0x27, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
  0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x2e,
  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x20, 0x3d, 0x20,
  0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
  0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x54, 0x6f, 0x6b, 0x65,
  0x6e, 0x3a, 0x27, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70,
  0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x70, 0x61,
  0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61,
  0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68,
  0x69, 0x6c, 0x64, 0x28, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
  0x6b, 0x65, 0x6e, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e,
  0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28,
  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65,
  0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27,
  0x62, 0x72, 0x27, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
  0x61, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x20, 0x3d, 0x20, 0x64,
  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61,
  0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x70,
  0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61,
  0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
  0x33, 0x2e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x20,
  0x3d, 0x20, 0x27, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x74, 0x68, 0x69, 0x6e,
  0x67, 0x73, 0x20, 0x55, 0x72, 0x6c, 0x3a, 0x27, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69,
  0x6c, 0x64, 0x28, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x2e, 0x61, 0x70, 0x70,
  0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x73, 0x6d, 0x61,
  0x72, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x72, 0x6c, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65,
  0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x64, 0x6f, 0x63, 0x75,
  0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
  0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x62, 0x72, 0x27, 0x29,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x70,
  0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d,
  0x65, 0x6e, 0x74, 0x34, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
  0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c,
  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x70, 0x27, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
  0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x2e, 0x69, 0x6e,
  0x6e, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x20, 0x3d, 0x20, 0x27, 0x52,
  0x65, 0x6c, 0x61, 0x79, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
  0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x27, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69,
  0x6c, 0x64, 0x28, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x2e, 0x61, 0x70, 0x70,
  0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x64, 0x65, 0x66,
  0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x29, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
  0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
  0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x62, 0x72, 0x27, 0x29, 0x29, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e,
  0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d,
  0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c,
  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x62, 0x72, 0x27, 0x29, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x2e, 0x61, 0x70, 0x70, 0x65,
  0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x73, 0x61, 0x76, 0x65,
  0x29, 0x3b, 0x0a, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e,
  0x66, 0x69, 0x67, 0x44, 0x69, 0x76, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e,
  0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x66, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x2f, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65,
  0x72, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x63, 0x6f, 0x6e,
  0x66, 0x69, 0x67, 0x44, 0x69, 0x76, 0x2e, 0x63, 0x68, 0x0a, 0x20, 0x20,
  0x7d, 0x29, 0x0a, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
  0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e
};
unsigned int sonoffLine_html_len = 4833;



unsigned long previousMillis = 0;
const long interval = 2000;
#ifdef SWITCH14
boolean buttonStateLast = false;
#endif
class TransportTraits
{
  public:
    virtual ~TransportTraits()
    {
    }

    virtual std::unique_ptr<WiFiClient> create()
    {
      return std::unique_ptr<WiFiClient>(new WiFiClient());
    }

    virtual bool verify(WiFiClient& client, const char* host)
    {
      (void)client;
      (void)host;
      return true;
    }
};

class TLSTraits : public TransportTraits
{
  public:
    TLSTraits()
    {
    }

    std::unique_ptr<WiFiClient> create() override
    {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored  "-Wdeprecated-declarations"
      return std::unique_ptr<WiFiClient>(new axTLS::WiFiClientSecure());
#pragma GCC diagnostic pop
    }

    bool verify(WiFiClient& client, const char* host) override
    {
      auto wcs = static_cast<axTLS::WiFiClientSecure&>(client);
      return true;
    }
};

class HTTPClient2 : public HTTPClient
{
  public:
    HTTPClient2()
    {
    }

    bool beginInternal2(String url, const char* expectedProtocol)
    {
      _transportTraits = TransportTraitsPtr(new TLSTraits());
      _port = 443;
      return beginInternal(url, expectedProtocol);
    }
};


ESP8266WebServer server ( 80 );
ESP8266HTTPUpdateServer httpUpdater;

Sonoff sonoff;

const int led = LED;

typedef struct
{
  byte package;
  char smartThingsUrl[128];
  char applicationId[128];
  char accessToken[128];
  int  defaultState;
  bool  lastState;
  char signature[3];
} Configuration;

typedef struct
{
  int state;
  char devName[256];
} SmartThingDevice;

Configuration configuration {
  12,
  "",
  "",
  "",
  0,
  false,
  "OK"
};


String IpAddress2String(const IPAddress& ipAddress)
{
  String ip = String(ipAddress[0]) + String(".") + \
              String(ipAddress[1]) + String(".") + \
              String(ipAddress[2]) + String(".") + \
              String(ipAddress[3]);
  return ip  ;
}



void storeStruct(void *data_source, size_t size)
{
  EEPROM.begin(size * 2);
  for (size_t i = 0; i < size; i++)
  {
    char data = ((char *)data_source)[i];
    EEPROM.write(i, data);
  }
  EEPROM.commit();
}

void loadStruct(void *data_dest, size_t size)
{
  EEPROM.begin(size * 2);
  byte value = EEPROM.read(0);
  if (value = 12) {
    for (size_t i = 0; i < size; i++)
    {
      char data = EEPROM.read(i);
      ((char *)data_dest)[i] = data;
    }
  }

}

void saveSmartThingsSettings(String smartThingsUrl, String applicationId,   String accessToken, int defaultState) {
  smartThingsUrl.toCharArray(configuration.smartThingsUrl, smartThingsUrl.length() + 1);
  applicationId.toCharArray(configuration.applicationId, applicationId.length() + 1);
  accessToken.toCharArray(configuration.accessToken, accessToken.length() + 1);
  configuration.defaultState = defaultState;
  storeStruct(&configuration, sizeof(configuration));
}

void saveSmartThingsSettings(boolean lastState) {
  configuration.lastState = lastState;
  storeStruct(&configuration, sizeof(configuration));
}

void loadSmartThingsSettings() {
  Serial.println ( "start loading ..." );
  Configuration readConfiguration{
    12,
    "",
    "",
    "",
    0,
    false,
    "OK"
  };

  loadStruct(&readConfiguration, sizeof(readConfiguration));
  Serial.println ( " loaded" );
  if (String(readConfiguration.signature) == String("OK")) {
    Serial.println ( "Configuration is Valid: " + String(readConfiguration.signature) + " lastState: " + String(readConfiguration.lastState));
    configuration = readConfiguration;
  } else {
    Serial.println ( "Configuration inValid: " + String(readConfiguration.signature));
  }
}

void switchOn(boolean force) {
  if (force || (getSwitchState() != 0 && !sonoff.relay.isOn())) {
    if (String(configuration.applicationId) != String("") &&
        String(configuration.accessToken) != String("")) {
      HTTPClient2 http;
      String url = String(configuration.smartThingsUrl) + "/api/smartapps/installations/" + String(configuration.applicationId) + "/on?access_token=" + String(configuration.accessToken);
      Serial.println ( "Starting SmartThings Http On : " + url );
      http.beginInternal2(url, "https");
      http.addHeader("Content-Type", "application/json");
      http.POST("{\"ip\":\"" + IpAddress2String( WiFi.localIP()) + "\",\"mac\":\"" + String(WiFi.macAddress()) + "\",\"pow\":\"" + String(sonoff.isPow()) + "\"}");
      http.writeToStream(&Serial);
      http.end();
    }
    sonoff.relay.on();
    digitalWrite ( led, 0 );
    saveSmartThingsSettings(true);
  }

}

int getSwitchState() {
  return getSmartThingsDevice().state;
}


SmartThingDevice getSmartThingsDevice() {
  SmartThingDevice smartThingsDevice{
    -1,
    ""
  };
  if (String(configuration.applicationId) != String("") &&
      String(configuration.accessToken) != String("")) {
    HTTPClient2 http;
    String url = String(configuration.smartThingsUrl) + "/api/smartapps/installations/" + String(configuration.applicationId) + "/current?access_token=" + String(configuration.accessToken);
    Serial.println ( "Starting SmartThings Http current : " + url );
    http.beginInternal2(url, "https");
    http.addHeader("Content-Type", "application/json");
    http.POST("{\"ip\":\"" + IpAddress2String( WiFi.localIP()) + "\",\"mac\":\"" + String(WiFi.macAddress()) + "\",\"pow\":\"" + String(sonoff.isPow()) + "\"}");
    String payload = http.getString();
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(payload);
    String status = root["status"];
    String devName = root["name"];
    int stState;
    if (status == "on") {
      stState = 1;
    } else if (status == "off") {
      stState = 0;
    } else {
      stState = 2;
    }
    smartThingsDevice.state = stState;
    devName.toCharArray(smartThingsDevice.devName, devName.length() + 1);
    http.end();
  }

  return smartThingsDevice;
}

void switchOff() {
  switchOff(false);
}

void switchOff(boolean force) {
  if (force || (getSwitchState() != 1 && sonoff.relay.isOn())) {

    if (String(configuration.applicationId) != String("") &&
        String(configuration.accessToken) != String("")) {
      HTTPClient2 http;
      String url = String(configuration.smartThingsUrl) + "/api/smartapps/installations/" + String(configuration.applicationId) + "/off?access_token=" + String(configuration.accessToken);
      Serial.println ( "Starting SmartThings Http off: " + url );
      http.beginInternal2(url, "https");
      http.addHeader("Content-Type", "application/json");
      http.POST("{\"ip\":\"" + IpAddress2String( WiFi.localIP()) + "\",\"mac\":\"" + String(WiFi.macAddress()) + "\",\"pow\":\"" + String(sonoff.isPow()) + "\"}");
      http.writeToStream(&Serial);
      http.end();
    }
    sonoff.relay.off();
    digitalWrite ( led, 1 );
    saveSmartThingsSettings(false);
  }
}

void smartthingsInit() {
  Serial.println ( "Starting SmartThings Init" );
  if (String(configuration.applicationId) != String("") &&
      String(configuration.accessToken) != String("")) {

    HTTPClient2 http;
    String url = String(configuration.smartThingsUrl) + "/api/smartapps/installations/" + String(configuration.applicationId) + "/" + "init?access_token=" + String(configuration.accessToken);
    Serial.println ( "Sending Http Get " + url );
    http.beginInternal2(url, "https");
    http.addHeader("Content-Type", "application/json");
    http.POST("{\"ip\":\""
              + IpAddress2String( WiFi.localIP())
              + "\",\"mac\":\""
              + String(WiFi.macAddress())
              + "\", \"relay\": \""
              + String(sonoff.relay.isOn() ? "on" : "off")
              + "\",\"pow\":\"" + String(sonoff.isPow()) + "\"}");
    http.writeToStream(&Serial);
    http.end();
  } else {
    Serial.println ( "SmartThings Init Skip" );
  }
}

void handleSettings () {
  String smartThingsUrl = server.arg("smartThingsUrl");
  String applicationId = server.arg("applicationId");
  String accessToken = server.arg("accessToken");
  String defaultStateString = server.arg("defaultState");
  saveSmartThingsSettings(smartThingsUrl, applicationId, accessToken, (defaultStateString == String("")) ? 0 : defaultStateString.toInt());
  smartthingsInit();
  server.sendHeader("Location", "/");
  server.send(303);
}

void handleToggle () {
  if (sonoff.relay.isOn()) {
    switchOff(true);
  } else {
    switchOn(true);
  }
  server.sendHeader("Location", "/");
  server.send(303);
}

void handleOn () {
  switchOn(false);
  server.send ( 200, "application/json", "{ \"relay\": \"on\", \"ip\":\"" + IpAddress2String( WiFi.localIP()) + "\",\"mac\":\"" + String(WiFi.macAddress()) + "\",\"pow\":\"" + String(sonoff.isPow()) + "\" }" );
}

void handleOff () {
  switchOff(false);
  server.send ( 200, "application/json", "{ \"relay\": \"off\", \"ip\":\"" + IpAddress2String( WiFi.localIP()) + "\" ,\"mac\":\"" + String(WiFi.macAddress()) + "\" ,\"pow\":\"" + String(sonoff.isPow()) + "\" }" );
}

void handleState () {
  SmartThingDevice std = getSmartThingsDevice();
  String devStatus = "undefined";
  if (std.state == 0) {
    devStatus = "off";
  } else {
    devStatus = "on";
  }
  server.send ( 200, "application/json",
                "{ \"relay\": \""
                + String(sonoff.relay.isOn() ? "on" : "off")
                + "\",\"uptime\":" +
                String(millis()) +
                ", \"ssid\": \""
                + ssid +
                "\",\"ip\":\""
                + IpAddress2String( WiFi.localIP())
                + "\", \"mac\":\""
                + String(WiFi.macAddress())
                + "\", \"applicationId\":\""
                + String(configuration.applicationId)
                + "\", \"accessToken\":\""
                + String(configuration.accessToken)
                + "\", \"smartThingsUrl\":\""
                + String(configuration.smartThingsUrl)
                + "\", \"smartthingsName\":\""
                + String(std.devName)
                + "\", \"smartthingsStatus\":\""
                + devStatus
                + "\", \"pow\":\""
                + String(sonoff.isPow())
                + "\", \"defaultState\":"
                + String(configuration.defaultState)
                + " }");
}

void handleinit () {
  smartthingsInit();
  handleState ();
}

void handlePow () {
  if (sonoff.isPow()) {
    server.send ( 200, "application/json",
                  "{ \"relay\": \""
                  + String(sonoff.relay.isOn() ? "on" : "off")
                  + "\",\"ip\":\""
                  + IpAddress2String( WiFi.localIP())
                  + "\", \"mac\":\""
                  + String(WiFi.macAddress())
                  + "\", \"pow\":\""
                  + String(sonoff.isPow())
                  + "\", \"voltage\":\""
                  + String(sonoff.getVoltage())
                  + "\", \"current\":\""
                  + String(sonoff.getCurrent())
                  + "\", \"activePower\":\""
                  + String(sonoff.getActivePower())
                  + "\", \"apparentPower\":\""
                  + String(sonoff.getApparentPower())
                  + "\", \"powerFactor\":\""
                  + String(sonoff.getPowerFactor())
                  + "\", \"reactivePower\":\""
                  + String(sonoff.getReactivePower())
                  + "\", \"energy\":\""
                  + String(sonoff.getEnergy())
                  + "\", \"currentMultiplier\":\""
                  + String(sonoff.getCurrentMultiplier())
                  + "\", \"voltageMultiplier\":\""
                  + String(sonoff.getVoltageMultiplier())
                  + "\", \"powerMultiplier\":\""
                  + String(sonoff.getPowerMultiplier())
                  + "\" }");
  } else {
    handleState ();
  }
}

void handleRoot() {
  server.send ( 200, "text/html", sonoffLine_html );
}

void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += ( server.method() == HTTP_GET ) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";

  for ( uint8_t i = 0; i < server.args(); i++ ) {
    message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n";
  }

  server.send ( 404, "text/plain", message );
}

void setup ( void ) {
  pinMode ( led, OUTPUT );
  digitalWrite ( led, 1 );
  Serial.begin ( 9600 );

  WiFi.begin ( ssid, password );
  Serial.println ( String("Connecting Wifi ") + String(ssid) );

  // Wait for connection
  while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 500 );
    Serial.print ( "." );
  }
  WiFi.mode(WIFI_STA);
  loadSmartThingsSettings();

  Serial.println ( "" );
  Serial.print ( "Connected to " );
  Serial.println ( ssid );
  Serial.print ( "IP address: " );
  Serial.println (IpAddress2String( WiFi.localIP()) );
  Serial.print ( "MAC address: " );
  Serial.println (WiFi.macAddress() );

  if ( MDNS.begin ( "Sonoff" ) ) {
    Serial.println ( "MDNS responder not needed" );
  }
  //smartthingsInit();

  server.on ( "/", handleRoot );
  server.on ( "/config", HTTP_POST, handleSettings );
  server.on ( "/toggle", HTTP_POST, handleToggle );
  server.on ( "/on", handleOn);
  server.on ( "/off", handleOff );
  server.on ( "/state", handleState);
  server.on ( "/health", handleinit);
  server.on ( "/pow", handlePow);
  server.onNotFound ( handleNotFound );
  httpUpdater.setup(&server);
  server.begin();
  MDNS.addService("http", "tcp", 80);
  Serial.println ( "HTTP server started" );
  Serial.println ( "configuration.defaultState = " + String(configuration.defaultState));
  Serial.println ( "configuration.lastState = " + String(configuration.lastState) );
  Serial.println("HTTPUpdateServer ready! Open http://" + String(IpAddress2String( WiFi.localIP())) + "/update in your browser");
  sonoff.setup();
  ArduinoOTA.begin();

  if (configuration.defaultState == 1) {
    switchOn(true);
  } else if (configuration.defaultState == 2) {
    if (configuration.lastState) {
      switchOn(true);
    } else {
      switchOff(true);
    }
  } else if (configuration.defaultState == 3) {
    int sthStatus = getSwitchState();
    if (sthStatus == 0) {
      switchOff(true);
    } else if (sthStatus == 1) {
      switchOn(true);
    } else {
      if (configuration.lastState) {
        switchOn(true);
      } else {
        switchOff(true);
      }
    }

  } else {
    switchOff(true);
  }
  ArduinoOTA.begin();
}

void loop ( void ) {
  ArduinoOTA.handle();
  yield();
  server.handleClient();
  sonoff.loop();
  boolean buttonState = sonoff.IsButtonOn();
#ifdef SWITCH14
  if (buttonStateLast != buttonState ) {
    if (buttonState) {
      switchOn(true);
    } else {
      switchOff(true);
    }
    buttonStateLast =  buttonState;
  }
#endif

  //  if (buttonStateLast && !buttonState){
  //    Serial.println ( "Switch off" );
  //     switchOff();
  //  } else if (!buttonStateLast && buttonState){
  //    Serial.println ( "Switch on" );
  //    switchOn();
  //  }
  if (sonoff.sw.getEvent() == SWITCH_EVENT_ON) {
    if (sonoff.relay.isOn()) {
      switchOff(true);
    }
    else {
      switchOn(true);
    }
  }

}
